---
title: "The new OBO API: an overview"
description: "Introductory notes on using the new (2023) version of the Old Bailey Online API"
author: "Sharon Howard"
date: "2025-05-18"
---

## Introduction

As part of a major overhaul and refresh of the [Old Bailey Online](https://www.oldbaileyonline.org/) in 2023, there were major breaking changes to the OBO API. The available [documentation](https://www.oldbaileyonline.org/about/api) for the new API is sparse, and these notes are intended to help users find their way around. 

I cover two of the available API endpoints:

-  https://www.dhi.ac.uk/api/data/oldbailey_record - for searching trials and other sections in the Old Bailey Proceedings
-  https://www.dhi.ac.uk/api/data/oldbailey_record_single - for full data about individual trials and other sections in the Proceedings

There are two other endpoints, one for Ordinary's Accounts and one for the Associated Records database. I haven't yet looked at these in any detail and may add further notes about them later, but would expect them to be similar.

See also [this worked example to search and download data from the API using R](./example-api.qmd).


## Notes on search parameters

The [official documentation](https://www.oldbaileyonline.org/about/api) only mentions keyword searching with the `text` parameter. These notes are intended to fill in some of the gaps for more structured searches of offences, etc.

The crucial thing to know is that API query URLs mirror search results URLs on the website. 

So, for example, the URL for the first page of results for a site search for the offence "killing":

- https://www.oldbaileyonline.org/search/crime?offence=kill 

The corresponding api query url: 

- https://www.dhi.ac.uk/api/data/oldbailey_record?offence=kill 

(Note: the /crime/ part of the website URL is not needed.)


So generally you should be able to test out queries on the website first to work out what parameters you need for API queries, and I'm not going to list a lot of examples here. 

(There could potentially be specific omissions in the API that I'm not aware of, so I recommend initially testing out results for whatever you want to do.) 


### pagination

The example URL above will only get the first 10 results, but most searches will return more than that. The parameter for this is `from`.

To get the second page of results: **from=10**

So, for the example above: https://www.dhi.ac.uk/api/data/oldbailey_record?offence=kill&from=10

(Note that numbering starts from 0, not 1.)



### dates and date ranges

A range specifying month and year (March 1739-August 1755): **month_gte=3&month_lte=8&year_gte=1739&year_lte=1755**

For the year range only: **year_gte=1739&year_lte=1755**

A single year: **year_gte=1739&year_lte=1739**


### offences

The top level category breaking peace (including all subcategories): **offence=breakingPeace**

For wounding, subcategory of breakingPeace: **offence=wounding**

For subcategories you don't need to specify the parent category *except* for "other" subcategories

- **offence=breakingPeaceOther** / **offence=deceptionNoDetail**

"NoDetail" is a new subcategory which essentially means the same thing as "Other" but reflects some inconsistencies in the XML where the offence was tagged without any subcategory at all (but should properly have been Other). In the old API I think there was no way to pull these out separately.


### verdicts and sentences

A verdict of guilty: **verdict=guilty**

A sentence of death: **punishment=death**


### pleas (new)

Pleaded guilty: **plea=guilty**

I think all the old "pleaded" verdicts are still available under verdict and on a superficial inspection seem to get much the same results. 
Eg **plea=guilty** and **verdict=pleadedGuilty** seem to get the same results. 
However, this new option is the result of a fairly recent project and there may well be details I don't know about in the background information on the website. 



### item types

To restrict to trial texts only (ie excluding advertisements, supplementary, etc): **div_type=trialAccount**

This probably won't matter when doing offence/verdict/sentence queries but will be more relevant for text queries.


### defendants and victims

Eg for gender:

- **defendant_gender=female**
- **victim_gender=male**



## The JSON

There is a lot of... stuff... in the JSON returned by the API, much of it not useful for data analysis. This focuses on some bits you might care about.


```{r}
#| include: false

library(jsonlite)
library(listviewer)
library(xml2)

#library(tidyverse)

sample_search_json <- fromJSON(here::here("outputs/housebreaking.json"))
sample_trial_json <- fromJSON(here::here("outputs/t17000115-17.json"))
```




### search results

Browse a sample of the search results JSON:


```{r}
jsonedit(sample_search_json)
```

([search for housebreaking between 1700 and 1704](https://www.oldbaileyonline.org/search/crime?offence=housebreaking&year_gte=1700&year_lte=1704#results))


The number of results (hits > total)

```{r}
sample_search_json$hits$total
```

Trial IDs (hits > hits > _source > idkey) - needed to get full data of individual trials via the single record endpoint.

```{r}
sample_search_json$hits$hits$`_source`$idkey
```

The search returns very limited information about each trial (or other item); it does include a text snippet and the page title for each item, which could be useful for some purposes.

```{r}
sample_search_json$hits$hits$`_source`$text[[1]]
```


```{r}
sample_search_json$hits$hits$`_source`$title[[1]]
```



### single records


The single record endpoint is needed to get the full data about items.


It includes *three* versions of the trial/item text; two are most likely to be of interest for data analysis.

- `xml` - the full tagged XML (hits > hits > _source > xml)
- `text` - a plain text version (hits > hits > _source > text)

*plus*

- `metadata` - this contains the same information as the simplified summary table at the top of each trial page, which might be sufficient for some purposes (hits > hits > _source > metadata)

Browse a sample trial JSON:

```{r}
jsonedit(sample_trial_json)
```


```{r}
## sample_trial_json$hits$hits$`_source`$xml
```


## For users of the old OBAPI

A few notes about the major differences between new and old API.

### changes to query URLs 

Previously for offences/verdicts/sentences in the URL it was always necessary to explicitly spell out category_subcategory. That's no longer necessary except in a few specific contexts (and it's done slightly differently).

An example: offence "fraud", subcategory of deception. The relevant bit of a search URL previously looked like this:

_**offences_offenceCategory_offenceSubcategory=deception_fraud**

That's been replaced by the much shorter and simpler

**offence=fraud**

Now the top level category is only needed if

- searching for the whole category, eg: offence=deception
- searching for subcategories Other or NoDetail, which need to be like this
  - **offence=deceptionOther** (previously deception_other)
  - **offence=deceptionNoDetail** (not in the previous version) 


### what's gone away

The new API is in many ways more powerful than the old and with fewer limits, but it's also more generic and some functionality is no longer available (*as far as I can tell*, though the lack of documentation can make things hard to find).

- the `terms` endpoint which gave a list of all the fields and values available in the API
- the option (breakdown=[field]) for a breakdown of subcategories and so on for a search
- the option (return=zip) to download zip archives of multiple trials XML

The functionality can be reproduced but usually with some loss of convenience; if you have scripts using them you'll probably find that their replacements need to be longer and more complicated.

The OBAPI demonstrator has also been withdrawn; this has no replacement.
